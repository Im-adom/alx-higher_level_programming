Test cases for 100-matrix_mul
===========================

Using the ``matrix_mul`` function
-----------------------------

Importing function from the module:
>>> matrix_mul  = __import__('100-matrix_mul').matrix_mul

first matrix is not a list
>>> m_a = "hello"
>>> m_b = [[1, 2, 3]]

>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
TypeError: m_a must be a list

second matrix is not a list
>>> m_b = "hello"
>>> m_a = [[1, 2, 3], [4, 5, 6]]

>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
TypeError: m_b must be a list

first matrix is empty
>>> m_a =[]
>>> m_b = [[1, 2, 3], [4, 5, 6]]

>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

second matrix is empty
>>> m_b =[]
>>> m_a = [[1, 2, 3], [4, 5, 6]]

>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: m_b can't be empty


one element of the first matrix is not an int or a float
>>> m_a = [[1, 2, "hi"], [4, 5, 6]]
>>> m_b = [[1, 2, 3], [4, 5, 6]]

>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
TypeError: m_a should contain only integers or floats

one element of the second matrix is not an int or a float
>>> m_b = [[1, 2, "hi"], [4, 5, 6]]
>>> m_a = [[1, 2, 3], [4, 5, 6]]

>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
TypeError: m_b should contain only integers or floats

row in the matrix are not the same size
>>> m_a = [[1, 2, 3], [4, 5]]
>>> m_b = [[1, 2, 3], [4, 5, 6]]

>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
TypeError: each row of m_a must should be of the same size

>>> m_b = [[1, 2, 3], [4, 5]]
>>> m_a = [[1, 2, 3], [4, 5, 6]]

>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
TypeError: each row of m_b must should be of the same size

>>> m_b = [[1, 2, 3], [4, 5, 6]]
>>> m_a = [[1, 2, 3]]

>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied
